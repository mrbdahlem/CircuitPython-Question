name: Build and Deploy Maven Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to apply (e.g. v0.0.1)'
        required: false
  # push:
  #   branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: circuitpython-question

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Determine effective version
        id: version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            fallback_version=$(git describe --tags --abbrev=0 || echo 0.0.1-SNAPSHOT)
            echo "Using fallback version: $fallback_version"
            echo "version=$fallback_version" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: circuitpython-question/package-lock.json

      - name: Install dependencies and build
        working-directory: circuitpython-question
        run: |
          npm ci
          npm run build

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Configure Maven for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and deploy JAR
        run: mvn --batch-mode clean deploy -DskipTests -Drevision=${{ steps.version.outputs.version }}

      - name: Create Git tag (if it doesn't exist)
        if: ${{ steps.version.outputs.version }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      
          tag=${{ steps.version.outputs.version }}
          if git ls-remote --tags origin | grep -q "refs/tags/$tag"; then
            echo "Tag '$tag' already exists. Skipping tag creation."
          else
            git tag "$tag"
            git push origin "$tag"
          fi
      

